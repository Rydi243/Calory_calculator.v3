//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Calorie = newCalorieTable("public", "calorie", "")

type calorieTable struct {
	postgres.Table

	// Columns
	ID      postgres.ColumnInteger
	Product postgres.ColumnString
	Weight  postgres.ColumnInteger
	Calorie postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type CalorieTable struct {
	calorieTable

	EXCLUDED calorieTable
}

// AS creates new CalorieTable with assigned alias
func (a CalorieTable) AS(alias string) *CalorieTable {
	return newCalorieTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CalorieTable with assigned schema name
func (a CalorieTable) FromSchema(schemaName string) *CalorieTable {
	return newCalorieTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CalorieTable with assigned table prefix
func (a CalorieTable) WithPrefix(prefix string) *CalorieTable {
	return newCalorieTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CalorieTable with assigned table suffix
func (a CalorieTable) WithSuffix(suffix string) *CalorieTable {
	return newCalorieTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCalorieTable(schemaName, tableName, alias string) *CalorieTable {
	return &CalorieTable{
		calorieTable: newCalorieTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newCalorieTableImpl("", "excluded", ""),
	}
}

func newCalorieTableImpl(schemaName, tableName, alias string) calorieTable {
	var (
		IDColumn       = postgres.IntegerColumn("id")
		ProductColumn  = postgres.StringColumn("product")
		WeightColumn   = postgres.IntegerColumn("weight")
		CalorieColumn  = postgres.IntegerColumn("calorie")
		allColumns     = postgres.ColumnList{IDColumn, ProductColumn, WeightColumn, CalorieColumn}
		mutableColumns = postgres.ColumnList{ProductColumn, WeightColumn, CalorieColumn}
	)

	return calorieTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:      IDColumn,
		Product: ProductColumn,
		Weight:  WeightColumn,
		Calorie: CalorieColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
